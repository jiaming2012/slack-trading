syntax = "proto3";

package playground;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

option go_package = "./playground";

service PlaygroundService {
    rpc CreatePlayground (CreatePolygonPlaygroundRequest) returns (CreatePlaygroundResponse);
    rpc CreateLivePlayground (CreateLivePlaygroundRequest) returns (CreatePlaygroundResponse);
    rpc GetPlaygrounds(GetPlaygroundsRequest) returns (GetPlaygroundsResponse);
    rpc NextTick(NextTickRequest) returns (TickDelta);
    rpc PlaceOrder(PlaceOrderRequest) returns (Order);
    rpc GetAccount(GetAccountRequest) returns (GetAccountResponse);
    rpc GetCandles(GetCandlesRequest) returns (GetCandlesResponse);
    rpc GetOpenOrders(GetOpenOrdersRequest) returns (GetOpenOrdersResponse);
    rpc SavePlayground(SavePlaygroundRequest) returns (EmptyResponse);
    rpc DeletePlayground(DeletePlaygroundRequest) returns (EmptyResponse);
    rpc GetAccountStats(GetAccountStatsRequest) returns (GetAccountStatsResponse);
    rpc GetAppVersion(google.protobuf.Empty) returns (GetAppVersionResponse);
}

message GetPlaygroundsRequest {
    repeated string tags = 1;
}

message GetAppVersionResponse {
    string version = 1;
}

message AccountMeta {
    string start_date = 1;
    optional string end_date = 2;
    repeated string symbols = 3;
    double initial_balance = 4;
    string environment = 5;
    optional string live_account_type = 6;
    repeated string tags = 7;
}

message Meta {
    double initial_balance = 1;
    string environment = 2;
    optional string live_account_type = 3;
    repeated string tags = 4;
}

message GetAccountStatsRequest {
    string playground_id = 1;
    bool equity_plot = 2;
}

message EquityPlot {
    string created_at = 1;
    double equity = 2;
}

message GetAccountStatsResponse {
    repeated EquityPlot equity_plot = 1;
}

message PlaygroundSession {
    string playground_id = 1;
    Meta meta = 2;
    Clock clock = 3;
    repeated Repository repositories = 4;
    double balance = 5;
    double equity = 6;
    double free_margin = 7;
    map<string, Position> positions = 8;
}

message GetPlaygroundsResponse {
    repeated PlaygroundSession playgrounds = 1;
}

message GetOpenOrdersResponse {
    repeated Order orders = 1;
}

message GetOpenOrdersRequest {
    string playground_id = 1;
    string symbol = 2;
}

message SavePlaygroundRequest {
    string playground_id = 1;
}

message EmptyResponse {}

message Clock {
    string current_time = 1;
    string start = 2;
    optional string stop = 3;
}

message Repository {
    string symbol = 1;
    uint32 timespan_multiplier = 2;
    string timespan_unit = 3;
    repeated string indicators = 4;
    uint32 history_in_days = 5;
}

message CreatePolygonPlaygroundRequest {
    double balance = 1;
    string start_date = 2;
    string stop_date = 3;
    repeated Repository repositories = 4;
    string environment = 5;
    optional string client_id = 6;
    repeated string tags = 7;
}

message DeletePlaygroundRequest {
    string playground_id = 1;
}

message CreateLivePlaygroundRequest {
    double balance = 1;
    string broker = 2;
    repeated Repository repositories = 3;
    string environment = 4;
    string account_type = 5;
    optional string client_id = 6;
    repeated string tags = 7;
}

message GetCandlesRequest {
    string playground_id = 1;
    string symbol = 2;
    int32 period_in_seconds = 3;
    string fromRTF3339 = 4;
    string toRTF3339 = 5;
}

message GetCandlesResponse {
    repeated Bar bars = 1;
}

message CreatePlaygroundResponse {
    string id = 1;
}

message GetAccountRequest {
    string playground_id = 1;
    bool fetch_orders = 2;
    optional string fromRTF3339 = 3;
    optional string toRTF3339 = 4;
    repeated string status = 5;
    repeated string sides = 6;
}

message GetAccountResponse {
    AccountMeta meta = 1;
    double balance = 2;
    double equity = 3;
    double free_margin = 4;
    repeated Order orders = 5;
    map<string, Position> positions = 6;
}

message Position {
    double quantity = 1;
    double cost_basis = 2;
    double pl = 3;
    double maintenance_margin = 4;
    double current_price = 5;
}
 
message PlaceOrderRequest {
    string playground_id = 1;
    string symbol = 2;
    string asset_class = 3;
    double quantity = 4;
    string side = 5;
    string type = 6;
    string duration = 7;
    string tag = 8;
    double requested_price = 9;
    optional double price = 10;
}

message NextTickRequest {
    string playground_id = 1;
    uint64 seconds = 2;
    bool is_preview = 3;
    string request_id = 4;
}

message TickDelta {
    repeated Trade new_trades = 1;
    repeated Candle new_candles = 2;
    repeated Order invalid_orders = 3;
    repeated TickDeltaEvent events = 4;
    string current_time = 5;
    bool is_backtest_complete = 6;
}

message LiquidationEvent {
    repeated Order orders_placed = 1;
}

message TickDeltaEvent {
    string type = 1;
    LiquidationEvent liquidation_event = 2;
}

message Bar {
    double volume = 1;
    double open = 2;
    double close = 3;
    double high = 4;
    double low = 5;
    string datetime = 6;
    double superT_50_3 = 7;
    int32 superD_50_3 = 8;
    double superL_50_3 = 9;
    double superS_50_3 = 10;
    double stochrsi_k_14_14_3_3 = 11;
    double stochrsi_d_14_14_3_3 = 12;
    double atr_14 = 13;
    double sma_50 = 14;
    double sma_100 = 15;
    double sma_200 = 16;
    bool stochrsi_cross_above_20 = 17;
    bool stochrsi_cross_below_80 = 18;
    double close_lag_1 = 19;
    double close_lag_2 = 20;
    double close_lag_3 = 21;
    double close_lag_4 = 22;
    double close_lag_5 = 23;
    double close_lag_6 = 24;
    double close_lag_7 = 25;
    double close_lag_8 = 26;
    double close_lag_9 = 27;
    double close_lag_10 = 28;
    double close_lag_11 = 29;
    double close_lag_12 = 30;
    double close_lag_13 = 31;
    double close_lag_14 = 32;
    double close_lag_15 = 33;
    double close_lag_16 = 34;
    double close_lag_17 = 35;
    double close_lag_18 = 36;
    double close_lag_19 = 37;
    double close_lag_20 = 38;
    double cdl_hammer = 39;
    double cdl_doji_10_0_1 = 40;
}

message Candle {
    string symbol = 1;
    int32 period = 2;
    Bar bar = 3;
}

message Trade {
    string symbol = 1;
    string create_date = 2;
    double quantity = 3;
    double price = 4;
}

message Order {
    uint64 id = 1;
    string class = 2;
    string symbol = 3;
    string side = 4;
    double quantity = 5;
    string type = 6;
    string duration = 7;
    double price = 8;
    double requested_price = 9;
    double stop_price = 10;
    string tag = 11;
    repeated Trade trades = 12;
    string status = 13;
    string reject_reason = 14;
    string create_date = 15;
    repeated Trade closed_by = 16;
    repeated Order closes = 17;
}

